// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/TengFeiyang01/webook/webook/article/events"
	"github.com/TengFeiyang01/webook/webook/article/grpc"
	"github.com/TengFeiyang01/webook/webook/article/ioc"
	"github.com/TengFeiyang01/webook/webook/article/repository"
	"github.com/TengFeiyang01/webook/webook/article/repository/cache"
	"github.com/TengFeiyang01/webook/webook/article/repository/dao"
	"github.com/TengFeiyang01/webook/webook/article/service"
	dao2 "github.com/TengFeiyang01/webook/webook/internal/repository/dao"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitAPP() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	articleDAO := dao.NewGORMArticleDAO(db)
	userDAO := dao2.NewUserDAO(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewArticleCache(cmdable)
	articleRepository := repository.NewCachedArticleRepository(articleDAO, loggerV1, userDAO, articleCache)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := events.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, loggerV1)
	articleServiceServer := grpc.NewArticleServiceServer(articleService)
	server := ioc.NewGRPCxServer(loggerV1, articleServiceServer)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitLogger, ioc.InitKafka, ioc.InitRedis)

var articleSvcSet = wire.NewSet(dao.NewGORMArticleDAO, repository.NewCachedArticleRepository, service.NewArticleService, cache.NewArticleCache, dao2.NewUserDAO)
