// Code generated by MockGen. DO NOT EDIT.
// Source: ./job.go
//
// Generated by this command:
//
//	mockgen -source=./job.go -package=svcmocks -destination=./mocks/job.mock.go JobService
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"
	domain "webook/webook/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// Preempt mocks base method.
func (m *MockJobService) Preempt(ctx context.Context) (domain.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preempt", ctx)
	ret0, _ := ret[0].(domain.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preempt indicates an expected call of Preempt.
func (mr *MockJobServiceMockRecorder) Preempt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockJobService)(nil).Preempt), ctx)
}

// ResetNextTime mocks base method.
func (m *MockJobService) ResetNextTime(ctx context.Context, j domain.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNextTime", ctx, j)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetNextTime indicates an expected call of ResetNextTime.
func (mr *MockJobServiceMockRecorder) ResetNextTime(ctx, j any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNextTime", reflect.TypeOf((*MockJobService)(nil).ResetNextTime), ctx, j)
}
