// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	article3 "github.com/TengFeiyang01/webook/webook/article/events"
	article2 "github.com/TengFeiyang01/webook/webook/article/repository"
	cache2 "github.com/TengFeiyang01/webook/webook/article/repository/cache"
	dao2 "github.com/TengFeiyang01/webook/webook/article/repository/dao"
	service2 "github.com/TengFeiyang01/webook/webook/article/service"
	"github.com/TengFeiyang01/webook/webook/internal/repository"
	"github.com/TengFeiyang01/webook/webook/internal/repository/cache"
	"github.com/TengFeiyang01/webook/webook/internal/repository/dao"
	"github.com/TengFeiyang01/webook/webook/internal/service"
	"github.com/TengFeiyang01/webook/webook/internal/web"
	"github.com/TengFeiyang01/webook/webook/internal/web/jwt"
	"github.com/TengFeiyang01/webook/webook/ioc"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWT(cmdable)
	loggerV1 := InitLogger()
	v := ioc.InitGinMiddlewares(cmdable, handler, loggerV1)
	gormDB := InitDB()
	userDAO := dao.NewUserDAO(gormDB)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, loggerV1)
	codeCache := cache.NewRedisCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, cmdable, handler, loggerV1)
	wechatService := InitWechatService(loggerV1)
	wechatHandlerConfig := InitWechatHandlerConfig()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, wechatHandlerConfig, handler)
	articleDAO := dao2.NewGORMArticleDAO(gormDB)
	articleCache := cache2.NewArticleCache(cmdable)
	articleRepository := article2.NewCachedArticleRepository(articleDAO, loggerV1, userDAO, articleCache)
	client := InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article3.NewKafkaProducer(syncProducer)
	articleService := service2.NewArticleService(articleRepository, producer, loggerV1)
	articleHandler := web.NewArticleHandler(articleService, loggerV1)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitRedis, InitDB, InitLogger, ioc.NewSyncProducer, InitKafka)

var userSvcProvider = wire.NewSet(dao.NewUserDAO, cache.NewRedisUserCache, repository.NewUserRepository, service.NewUserService)

var articlSvcProvider = wire.NewSet(article2.NewCachedArticleRepository, dao2.NewGORMArticleDAO, service2.NewArticleService)
