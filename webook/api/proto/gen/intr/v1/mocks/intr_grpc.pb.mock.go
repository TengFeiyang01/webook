// Code generated by MockGen. DO NOT EDIT.
// Source: ./intr_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./intr_grpc.pb.go -package=intrv1mocks -destination=./mocks/intr_grpc.pb.mock.go InteractiveServiceClient
//

// Package intrv1mocks is a generated GoMock package.
package intrv1mocks

import (
	context "context"
	intrv1 "github.com/TengFeiyang01/webook/webook/api/proto/gen/intr/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInteractiveServiceClient is a mock of InteractiveServiceClient interface.
type MockInteractiveServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveServiceClientMockRecorder
}

// MockInteractiveServiceClientMockRecorder is the mock recorder for MockInteractiveServiceClient.
type MockInteractiveServiceClientMockRecorder struct {
	mock *MockInteractiveServiceClient
}

// NewMockInteractiveServiceClient creates a new mock instance.
func NewMockInteractiveServiceClient(ctrl *gomock.Controller) *MockInteractiveServiceClient {
	mock := &MockInteractiveServiceClient{ctrl: ctrl}
	mock.recorder = &MockInteractiveServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveServiceClient) EXPECT() *MockInteractiveServiceClientMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockInteractiveServiceClient) CancelLike(ctx context.Context, in *intrv1.CancelLikeRequest, opts ...grpc.CallOption) (*intrv1.CancelLikeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelLike", varargs...)
	ret0, _ := ret[0].(*intrv1.CancelLikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractiveServiceClientMockRecorder) CancelLike(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractiveServiceClient)(nil).CancelLike), varargs...)
}

// Collect mocks base method.
func (m *MockInteractiveServiceClient) Collect(ctx context.Context, in *intrv1.CollectRequest, opts ...grpc.CallOption) (*intrv1.CollectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(*intrv1.CollectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractiveServiceClientMockRecorder) Collect(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractiveServiceClient)(nil).Collect), varargs...)
}

// Get mocks base method.
func (m *MockInteractiveServiceClient) Get(ctx context.Context, in *intrv1.GetRequest, opts ...grpc.CallOption) (*intrv1.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*intrv1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveServiceClient)(nil).Get), varargs...)
}

// GetByIds mocks base method.
func (m *MockInteractiveServiceClient) GetByIds(ctx context.Context, in *intrv1.GetByIdsRequest, opts ...grpc.CallOption) (*intrv1.GetByIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIds", varargs...)
	ret0, _ := ret[0].(*intrv1.GetByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractiveServiceClientMockRecorder) GetByIds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractiveServiceClient)(nil).GetByIds), varargs...)
}

// IncrReadCnt mocks base method.
func (m *MockInteractiveServiceClient) IncrReadCnt(ctx context.Context, in *intrv1.IncrReadCntRequest, opts ...grpc.CallOption) (*intrv1.IncrReadCntResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrReadCnt", varargs...)
	ret0, _ := ret[0].(*intrv1.IncrReadCntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractiveServiceClientMockRecorder) IncrReadCnt(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractiveServiceClient)(nil).IncrReadCnt), varargs...)
}

// Like mocks base method.
func (m *MockInteractiveServiceClient) Like(ctx context.Context, in *intrv1.LikeRequest, opts ...grpc.CallOption) (*intrv1.LikeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Like", varargs...)
	ret0, _ := ret[0].(*intrv1.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Like indicates an expected call of Like.
func (mr *MockInteractiveServiceClientMockRecorder) Like(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractiveServiceClient)(nil).Like), varargs...)
}

// MockInteractiveServiceServer is a mock of InteractiveServiceServer interface.
type MockInteractiveServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveServiceServerMockRecorder
}

// MockInteractiveServiceServerMockRecorder is the mock recorder for MockInteractiveServiceServer.
type MockInteractiveServiceServerMockRecorder struct {
	mock *MockInteractiveServiceServer
}

// NewMockInteractiveServiceServer creates a new mock instance.
func NewMockInteractiveServiceServer(ctrl *gomock.Controller) *MockInteractiveServiceServer {
	mock := &MockInteractiveServiceServer{ctrl: ctrl}
	mock.recorder = &MockInteractiveServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveServiceServer) EXPECT() *MockInteractiveServiceServerMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockInteractiveServiceServer) CancelLike(arg0 context.Context, arg1 *intrv1.CancelLikeRequest) (*intrv1.CancelLikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.CancelLikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractiveServiceServerMockRecorder) CancelLike(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractiveServiceServer)(nil).CancelLike), arg0, arg1)
}

// Collect mocks base method.
func (m *MockInteractiveServiceServer) Collect(arg0 context.Context, arg1 *intrv1.CollectRequest) (*intrv1.CollectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.CollectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractiveServiceServerMockRecorder) Collect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractiveServiceServer)(nil).Collect), arg0, arg1)
}

// Get mocks base method.
func (m *MockInteractiveServiceServer) Get(arg0 context.Context, arg1 *intrv1.GetRequest) (*intrv1.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveServiceServer)(nil).Get), arg0, arg1)
}

// GetByIds mocks base method.
func (m *MockInteractiveServiceServer) GetByIds(arg0 context.Context, arg1 *intrv1.GetByIdsRequest) (*intrv1.GetByIdsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.GetByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockInteractiveServiceServerMockRecorder) GetByIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockInteractiveServiceServer)(nil).GetByIds), arg0, arg1)
}

// IncrReadCnt mocks base method.
func (m *MockInteractiveServiceServer) IncrReadCnt(arg0 context.Context, arg1 *intrv1.IncrReadCntRequest) (*intrv1.IncrReadCntResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.IncrReadCntResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractiveServiceServerMockRecorder) IncrReadCnt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractiveServiceServer)(nil).IncrReadCnt), arg0, arg1)
}

// Like mocks base method.
func (m *MockInteractiveServiceServer) Like(arg0 context.Context, arg1 *intrv1.LikeRequest) (*intrv1.LikeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", arg0, arg1)
	ret0, _ := ret[0].(*intrv1.LikeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Like indicates an expected call of Like.
func (mr *MockInteractiveServiceServerMockRecorder) Like(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractiveServiceServer)(nil).Like), arg0, arg1)
}

// mustEmbedUnimplementedInteractiveServiceServer mocks base method.
func (m *MockInteractiveServiceServer) mustEmbedUnimplementedInteractiveServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInteractiveServiceServer")
}

// mustEmbedUnimplementedInteractiveServiceServer indicates an expected call of mustEmbedUnimplementedInteractiveServiceServer.
func (mr *MockInteractiveServiceServerMockRecorder) mustEmbedUnimplementedInteractiveServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInteractiveServiceServer", reflect.TypeOf((*MockInteractiveServiceServer)(nil).mustEmbedUnimplementedInteractiveServiceServer))
}

// MockUnsafeInteractiveServiceServer is a mock of UnsafeInteractiveServiceServer interface.
type MockUnsafeInteractiveServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInteractiveServiceServerMockRecorder
}

// MockUnsafeInteractiveServiceServerMockRecorder is the mock recorder for MockUnsafeInteractiveServiceServer.
type MockUnsafeInteractiveServiceServerMockRecorder struct {
	mock *MockUnsafeInteractiveServiceServer
}

// NewMockUnsafeInteractiveServiceServer creates a new mock instance.
func NewMockUnsafeInteractiveServiceServer(ctrl *gomock.Controller) *MockUnsafeInteractiveServiceServer {
	mock := &MockUnsafeInteractiveServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInteractiveServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInteractiveServiceServer) EXPECT() *MockUnsafeInteractiveServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInteractiveServiceServer mocks base method.
func (m *MockUnsafeInteractiveServiceServer) mustEmbedUnimplementedInteractiveServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInteractiveServiceServer")
}

// mustEmbedUnimplementedInteractiveServiceServer indicates an expected call of mustEmbedUnimplementedInteractiveServiceServer.
func (mr *MockUnsafeInteractiveServiceServerMockRecorder) mustEmbedUnimplementedInteractiveServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInteractiveServiceServer", reflect.TypeOf((*MockUnsafeInteractiveServiceServer)(nil).mustEmbedUnimplementedInteractiveServiceServer))
}
