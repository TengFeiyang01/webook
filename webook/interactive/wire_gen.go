// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"webook/webook/interactive/events"
	"webook/webook/interactive/grpc"
	"webook/webook/interactive/ioc"
	"webook/webook/interactive/repository"
	"webook/webook/interactive/repository/cache"
	"webook/webook/interactive/repository/dao"
	"webook/webook/interactive/service"
)

// Injectors from wire.go:

func InitAPP() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, loggerV1, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	server := ioc.NewGRPCxServer(interactiveServiceServer)
	client := ioc.InitKafka()
	interactiveEventConsumer := events.NewInteractiveEventConsumer(client, interactiveRepository, loggerV1)
	v := ioc.NewConsumers(interactiveEventConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitLogger, ioc.InitKafka, ioc.InitRedis)

var interactiveSvcSet = wire.NewSet(dao.NewGORMInteractiveDAO, service.NewInteractiveService, cache.NewInteractiveRedisCache, repository.NewCachedInteractiveRepository)
